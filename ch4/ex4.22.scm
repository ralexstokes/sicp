;; Exercise 4.22.  Extend the evaluator in this section to support the special form let. (See exercise 4.6.)

(load "m-eval-analyze.scm")

(define (let? exp) (tagged-list? exp 'let))
(define (let-bindings exp) (cadr exp))
(define (binding-var binding) (car binding))
(define (binding-exp binding) (cadr binding))
(define (unzip-bindings bindings)
  (define (iter bindings vars exps)
    (if (null? bindings) (cons vars exps)
        (iter (cdr bindings)
              (cons (binding-var (car bindings)) vars)
              (cons (binding-exp (car bindings)) exps))))
  (iter bindings '() '()))
(define (let-body exp) (cddr exp))

(define (let->combination exp)
  (expand-let (let-bindings exp) (let-body exp)))
(define (expand-let bindings body)
  (let ((vars-exps (unzip-bindings bindings)))
    (let ((vars (car vars-exps))
          (exps (cdr vars-exps)))
      (cons (make-lambda vars body)
            exps))))

(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp) (analyze-quoted exp))
        ((variable? exp) (analyze-variable exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((let? exp) (analyze (let->combination exp)))
        ((application? exp) (analyze-application exp))
        (else
         (error "Unknown expression type -- ANALYZE" exp))))
